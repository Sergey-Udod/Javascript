// Git комманды

git --version //смотрим установлен ли гит и какой он версии

git update-git-for-windows //обновление гит

git status //узнаем активирован ли гит в текущей директории

git init //инициализация гит в текущей директории



git add index.html //подготовка файла index.html к сохранению
git commit -m 'create base page' //сохранение с комментарием



git log //узнаем какие есть сохраненные состояния в гите

что-бы вернуться к предыдущему состоянию, проще всего скопировать 
хэш коммита (8190075149e8b9bcf3cac88677206a0dac095235) и выполнить
комманду git checkout 8190075149e8b9bcf3cac88677206a0dac095235

git checkout 8190075149e8b9bcf3cac88677206a0dac095235 //возврат к указанному коммиту

git checkout master //возврат к сохранению с веткой master

git branch // просмотр перечня веток

git branch develop // добавление ветки develop

git config --global alias.ci commit // добавляем быструю комманду ci (это git commit)

code ~/.gitconfig //это конфиг гита, где можно прописать алиасы
Это алиас:
[alias]
  ci = commit
  co = checkout
  br = branch
  st = status
  lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --branches 


git add . //подготовка всех файлов из текущей директории к сохранению

git restore --staged .env.git.local //удалить свой файл из подготовленных к сохранению

touch .gitignore // git ignore - записать все файлы и папки которые не нужно подготавливать к сохранению
code .gitignore //открыть список гитигнор (сюда добавляем наш файл исключение .env.git.local)
и теперь когда мы будем выполнять команду git add . то наш файл исключение туда уже не попадет

git commit -a //все измененные файлы автоматически будут добавлены к сохранению

git config --global core.editor nano //настройка гита - добавление редактора внутреннего

git commit -am 'add blue color' //сохранение всех изменений без открытия редактора


Основная ветка по умолчанию называется "master", но это можно изменить командой git branch -m

git branch main -m //переименование ветки

git branch feat-42/implement-page-footer //создание ветки с кодом задачи "из менеджмент системы Jira"

git branch -d feat-42/implement-page-footer //удаление ветки

git checkout -b feat-42/implement-page-footer // создание ветки и переключение на неё (это -b)

git switch -c develop //также переключение между ветками и коммитами можно сделать с помощью команды git switch. в Данном случае это создание ветки develop и переключение на нее

/* Добавление изменений в основную ветку:
  - для этого сначала переключаемся на ветку main: git switch main
  - выполняем: git merge feat-42/implement-page-footer
*/

//Но если изменения после слияния веток оказались ошибочными, то:
- можно создать новый коммит (самый безопасный путь)!!!, где будут изменения обратные к тем что мы делали:
  -- git revert 2a3ea26 // отмена коммита с указанием хэша коммита (попадаем в редактор и нажимаем Ctrl+X)
- переменстить ветку main на несколько коммитов раньше:
  -- git reset 2a3ea26 // возврат к коммиту с указанием хэша коммита. Переставляет ветку куда-то раньше по истории, но не изменяет файлы в рабочей директории
    -- git reset HEAD^^ --hard// (перемещаемся на ветку develop) если мы хотим не просто вернуться к какому-то коммиту. а удалить изменения в текущей директории то добавляем флаг '--hard'
 
______________________________

GitHub

Для клонирования репозитория с сайта гитхаб нужно: 
- скопировать HTTPS ссылку (например https://github.com/Sergey-Udod/lucesposa.com.git)
- переходим в первоначальную директорию с проэктами в терминале: cd ..
- затем выполняем команду: git clone https://github.com/Sergey-Udod/lucesposa.com.git
- затем заходим в эту папку, например: cd my-project1
- ls
- git status
- git lg (смотрим какие коммиты есть)

git remote // позволяет увидеть все подключенные удаленные репозитории

git remote add origin https://github.com/Sergey-Udod/lucesposa.com.git // добавляем репозиторий на гитхаб (origin - источник)

далее проверяем что репозиторий создался введя команду git remote
затем можно изменить название основной ветки: git branch -M main

отправить изменения с моей ветки на репозиторий гитхаб: git push -u origin main (флаг -u позволяет синхронизировать ветку в локальном репозитории с веткой в отдаленном репозиторие)

 
